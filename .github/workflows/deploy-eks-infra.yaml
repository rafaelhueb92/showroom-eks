name: Terraform Deploy Infrastructure

on:
  push:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: true
  AWS_DEBUG: true
  AWS_REGION: us-east-1

jobs:

  deploy-eks-cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          bash set-var-github-env.sh ${{ github.repository }} ${{ secrets.AWS_ACCOUNT_ID }}
        working-directory: ./bash 

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TF_VAR_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clear AWS Credentials Cache
        run: rm -rf ~/.aws/cli/cache

      - name: Configure Terraform backend (state.tf)
        run: bash ./../bash/backend-create.sh
        working-directory: ./terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0
          
      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: ./terraform

      - name: Check Destroy Flag
        id: check-destroy
        run: bash ./../bash/check-destroy.sh
        working-directory: ./terraform

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Destroy Resources (if destroy flag is true)
        if: env.DESTROY == 'true'
        run: terraform destroy -auto-approve
        working-directory: ./terraform
        continue-on-error: true

      - name: Apply Changes 
        if: env.DESTROY == 'false'
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Set Terraform Outputs to GitHub Env
        if: env.DESTROY == 'false'
        run: |
          bash ./../bash/set-tf-var-github-env.sh "EKS_CLUSTER_NAME" "eks_cluster_name"
          bash ./../bash/set-tf-var-github-env.sh "PROJECT_NAME" "project_name"
          bash ./../bash/set-tf-var-github-env.sh "CERTIFICATE_ARN" "certificate_arn"
        working-directory: ./terraform

      - name: Upload Terraform Outputs as Artifacts
        uses: actions/upload-artifact@v4
        if: env.DESTROY == 'false'
        with:
          name: env-output
          path: env.txt
      
      ## IF FAILS
      
      - name: Refresh State to Get Applied Resources (failure)
        if: failure()  
        run: terraform apply -refresh-only -auto-approve
        working-directory: ./terraform

      - name: List Changed Resources (failure)
        if: failure() 
        id: list-resources
        run: bash ./../bash/list-changed-resources.sh
        working-directory: ./terraform

      - name: Destroy Only Changed Resources (failure)
        if: failure() 
        run: bash ./../bash/destroy-changed-resources.sh
        working-directory: ./terraform