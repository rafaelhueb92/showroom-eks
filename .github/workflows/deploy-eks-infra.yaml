name: Terraform Deploy Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: true
  AWS_DEBUG: true
  AWS_REGION: us-east-1

jobs:

  configure-aws-credentials:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          bash set-var-github-env.sh
        working-directory: ./bash 
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TF_VAR_ROLE_ARN }}
          aws-region: us-east-1 

      - name: Clear AWS Credentials Cache
        run: rm -rf ~/.aws/cli/cache

  configure-terraform-backend:
    needs: configure-aws-credentials
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure state.tf file
        run: bash ./../bash/backend-create.sh
        working-directory: ./terraform

  init:
    runs-on: ubuntu-latest
    outputs:
        destroy_flag: ${{ steps.check-destroy.outputs.DESTROY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Destroy Flag
        id: check-destroy
        run: bash ./../bash/check-destroy.sh
        working-directory: ./terraform 

      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: ./terraform 

  plan:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform 

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: needs.init.outputs.destroy_flag  == 'false'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Terraform apply
        run: terraform apply -auto-approve
        working-directory: ./terraform 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
      
      - name: Retrieve EKS Cluster Name from Terraform
        run: |
          bash ./../bash/set-tf-var-github-env.sh "EKS_CLUSTER_NAME" "eks_cluster_name"
        working-directory: ./terraform

      - name: Retrieve Project Name from Terraform
        run: |
          bash ./../bash/set-tf-var-github-env.sh "PROJECT_NAME" "project_name"
        working-directory: ./terraform

      - name: Retrieve ACM ARN from Terraform
        run: |
          bash ./../bash/set-tf-var-github-env.sh "CERTIFICATE_ARN" "certificate_arn"
        working-directory: ./terraform

      - name: Retrieve Secret argocd ARN from Terraform
        run: |
          bash ./../bash/set-tf-var-github-env.sh "ARGOCD_SECRET" "secret_arn"
        working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    needs: plan
    if: needs.init.outputs.destroy_flag == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Terraform destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform 
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
  
  rollback:
    runs-on: ubuntu-latest
    needs: apply
    if: failure()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Refresh State to Get Applied Resources
        run: terraform apply -refresh-only -auto-approve
        working-directory: ./terraform 

      - name: List Changed Resources
        id: list-resources
        run: bash ./../bash/list-changed-resources.sh
        working-directory: ./terraform 

      - name: Destroy Only Changed Resources
        run: bash ./../bash/destroy-changed-resources.sh
        working-directory: ./terraform