name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: true
  AWS_DEBUG: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "ROLE_NAME=GitHubActionsRole" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV

      - name: Concatenate environment variables to create IAM Role ARN
        run: |
          ARN="arn:aws:iam::$ACCOUNT_ID:role/$ROLE_NAME-${REPO_NAME#*/}"
          echo "The IAM Role ARN is: $ARN"
          echo "ROLE_ARN=$ARN" >> $GITHUB_ENV
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: us-east-1 
      
      - name: Clear AWS Credentials Cache
        run: rm -rf ~/.aws/cli/cache
      
      - name: Configure backend.hcl file
        run: bash backend-create.sh
        working-directory: ./terraform
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      - name: Read destroy.yaml and run terraform destroy if destroy=true
        run: |
          DESTROY=$(grep 'destroy:' destroy.yaml | awk '{print $2}')

          if [[ "$DESTROY" == "true" ]]; then
            echo "Destroying infrastructure as destroy=true in destroy.yaml"
            terraform destroy -auto-approve ./path-to-your-terraform-directory
            exit 0 
          else
            echo "Proceeding with apply since destroy=false or not set"
          fi
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Retrieve EKS Cluster Name from Terraform
        id: get-cluster-name
        run: |
          CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
          echo "EKS_CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
        working-directory: ./terraform
      
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name $EKS_CLUSTER_NAME

      - name: Deploy ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Terraform Destroy if Apply fails
        if: failure()  
        run: |
          echo "Applying failed. Running terraform destroy..."
          terraform destroy -auto-approve
        working-directory: ./terraform